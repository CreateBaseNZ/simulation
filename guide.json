{
    "subsystem": "Catch the Stars",
    "contents": [{
            "type": "subsystem-heading",
            "content": "Catch the Stars"
        },
        {
            "type": "text",
            "content": "Four stars have fallen out of the sky! Using the special star catching device attached to your robotic arm, collect all five stars. The star catching device collects stars by touching them, so you need to program your robotic arm to move the device to the correct coordinates. We’ll help guide you, but it’s up to you to collect them all.<br/><br/>We have broken this down into a series of tasks:<br/>0. Introduction<br/>1. Configure the robotic arm<br/>2. Setup<br/>3. Develop <span class='inline-code'>isError()</span><br/>4. Develop <span class='inline-code'>getToPosition()</span><br/>5. Get the job done<br/><br/>Good Luck!"
        },
        {
            "type": "task-heading",
            "content": "Task 0: Introduction"
        },
        {
            "type": "text",
            "content": "Your robotic arm has 3 key features:<br/><br/>1. Links: Links in robotic arms are the parts that connect the different joints of the robotic arm together. This is similar to how your upper arm connects your shoulder and elbow joint, and your forearm connects your elbow and wrist joints.<br/><br/> 2. Servo motors. The servo motors are a type of <span class='actuator-keyword keyword'>actuator</span> that receive instructions from the arduino board on what their angle should be and then rotate to match. We use one of these servos at each joint to rotate the links.<br/><br/>3. Arduino board: The Arduino is a miniature computer that can be programmed to interact with the environment. The Arduino board has an important part called a pin. Pins are connectors on the Arduino board that we can connect the servos to, and each pin has its own name (mostly numbers)."
        },
        {
            "type": "image",
            "src": "https://raw.githubusercontent.com/CreateBaseNZ/cb-simulation-model/main/images/project/Arduino.png",
            "alt": "Arduino Board"
        },
        {
            "type": "text",
            "content": "Some programming principles are discussed below:<br/><br/>1. Functions: <span class='function-keyword keyword'>functions</span> are pieces of code that perform a certain task.<br/><br/>2. Library:  a <span class='library-keyword keyword'>library</span> is a collection of pre-written that functions we can add to our program."
        },



        {
            "type": "task-heading",
            "content": "Task 1: Configure the Robotic Arm"
        },
        {
            "type": "text",
            "content": "Before we start programming, we will first have to configure the robotic arm."
        },
        {
            "type": "text",
            "content": "The code below gives us access to the RobotArm <span class='classAndObject-keyword keyword'>object</span> within the RobotArm <span class='library-keyword keyword'>library</span>. This library, called <span class='inline-code'>RobotArm.h</span>, includes all the <span class='function-keyword keyword'>functions</span> we need."
        },
        {
            "type": "code-block",
            "content": "//Include required libraries\n#include \"RobotArm.h\""
        },
        {
            "type": "text",
            "content": "Next, we create a list of the physical size of each link. The lengths of the links are 0.5m, 1.05m, 1.05m and 0.45m respectively."
        },
        {
            "type": "code-block",
            "content": "// Define length of each robot arm link\nfloat linkLengths[] = {0.5,1.05,1.05,0.45};"
        },
        {
            "type": "text",
            "content": "For the Robotic Arm to operate we need to define it as an <span class='classAndObject-keyword keyword'>object</span> with code."
        },
        {
            "type": "code-block",
            "content": "// Create our robot arm object.\nRobotArm myRobot(linkLengths);"
        },
        {
            "type": "text",
            "content": "Now let’s combine the code above into the editor below to write the code that configures your Robotic Arm!"
        },
        {
            "type": "editor-write",
            "content": ""
        },
        {
            "type": "text",
            "content": "When you think you are done, try running the code to make sure that you do not get any errors in the terminal at the bottom of your screen. <br><br>If you cannot figure out the answer, reveal the solution below using the un-collapse button (looks like an up and down arrow) on the right corner of the editor (but make sure that you update your code with the correct answer)."
        },
        {
            "type": "editor-read-only",
            "content": "//Include required libraries\n#include \"RobotArm.h\"\n// Define length of each robot arm link\nfloat linkLengths[] = {0.5,1.05,1.05,0.45};\n// Create our robot arm object.\nRobotArm myRobot(linkLengths);"
        },



        {
            "type": "task-heading",
            "content": "Task 2: Setup"
        },
        {
            "type": "text",
            "content": "We now need to add the positions of our four motors to myRobot."
        },
        {
            "type": "text",
            "content": "To do this, we first created an <span class='array-keyword keyword'>array</span> that contains the pin numbers on the Arduino board that we want to connect each of our servo motors to. The motors will be attached to pins 8, 9, 10 and 11 respectively."
        },
        {
            "type": "code-block",
            "content": "//Write the motor pins\nint motorPins[4]={8,9,10,11};"
        },
        {
            "type": "text",
            "content": "We now need to tell myRobot which pins the servo motors are connected to. We can do this by calling the function <span class='inline-code'>myRobot.ConfigurePins()</span> with the array that we created above as its input. Note that this function belongs only to the myRobot object. This is why we need to add <span class='inline-code'>myRobot.</span> in front of the function name <span class='inline-code'>ConfigurePins()</span>"
        },
        {
            "type": "code-block",
            "content": "//Setup the pins for our virtual robot\nmyRobot.ConfigurePins(motorPins);"
        },
        {
            "type": "text",
            "content": "We will now create a link between the arduino and the computer so we could communicate with the arduino through the terminal."
        },
        {
            "type": "code-block",
            "content": "//Initiate communication\nSerial.begin(9600);"
        },
        {
            "type": "text",
            "content": "Now it is your turn to write the code to set up your program!"
        },
        {
            "type": "editor-write",
            "content": "void setup() {\n\n}"
        },
        {
            "type": "text",
            "content": "Once again, when you think you are done, try running the code to make sure that you do not get any errors in the terminal. Check your code with the hidden answer below."
        },
        {
            "type": "editor-read-only",
            "content": "void setup(){\n\t//Write the motor pins\n\tint motorPins[4]={8,9,10,11};\n\t//Setup the pins for our virtual robot\n\tmyRobot.ConfigurePins(motorPins);\n\t//Initiate communication\n\tSerial.begin(9600);\n}"
        },



        {
            "type": "task-heading",
            "content": "Task 3: Develop isError"
        },
        {
            "type": "text",
            "content": "Now we need to check if the servos have reached their correct angles. If a servo has, then we need to stop it at that correct angle and repeat until all servos have stopped.<br/><br/>Let's develop our first <span class='function-keyword keyword'>function</span>. We will call the function <span class='inline-code'>isError()</span>. This function checks for an error between the target and current angles of the servo. An acceptable error of 1 degrees is allowed. The function returns <span class='inline-code'>true</span> if the error is greater than or equal to 1 and <span class='inline-code'>false</span> otherwise.<br/>"
        },
        {
            "type": "text",
            "content": "The first step of making our function is to write the <span class='function-keyword keyword'>function declaration</span>. The first part of the function declaration is the output data type, which will be <span class='bool-keyword keyword'>bool</span>. Next is the name of our function, which is <span class='inline-code'>isError</span>. Lastly, we put the inputs of the function, including their type declarations, in a pair of brackets. We will make both of their data types <span class='int-keyword keyword'>int</span>."
        },
        {
            "type": "code-block",
            "content": "//Declare function\nbool isError(int target, int current){"
        },
        {
            "type": "text",
            "content": "Next, we need to first find the absolute error between the two inputs. Absolute means that the sign (+ or -) is removed from the start of the number. We can do this by calling the <span class='inline-code'>abs()</span> function on the difference between the <span class='inline-code'>target</span> and <span class='inline-code'>current</span> angles."
        },
        {
            "type": "code-block",
            "content": "//Find the absolute error between the two angles\nint absError = abs(target-current);"
        },
        {
            "type": "text",
            "content": "If the error is greater than the allowable error, then the function should end and return <span class='inline-code'>true</span> as its output."
        },
        {
            "type": "code-block",
            "content": "//Check if the error is higher than the allowable error\nif(absError >= 1){\n\treturn true;\n}"
        },
        {
            "type": "text",
            "content": "If the condition above is not met then it should return false."
        },
        {
            "type": "code-block",
            "content": "//If error is less than allowable error return false\nelse{\n\treturn false;\n}\n}"
        },
        {
            "type": "text",
            "content": "Now it is your turn to write the code for the function!"
        },
        {
            "type": "editor-write",
            "content": ""
        },
        {
            "type": "editor-read-only",
            "content": "//Declare function\nbool isError(int target, int current){\n\t//Find the absolute error between the two angles\n\tint absError = abs(target-current);\n\t//Check if the error is higher than the allowable error\n\tif(absError >= 1){\n\t\treturn true;\n\t}\n\t//If error is less than allowable error return false\n\telse{\n\t\treturn false;\n\t}\n}"
        },



        {
            "type": "task-heading",
            "content": "Task 4: Develop getToPosition"
        },
        {
            "type": "text",
            "content": "Now that we have a function that checks if a servo has reached a position, we now need to make a function that tells the robotic arm to move to that specific position."
        },
        {
            "type": "text",
            "content": "The first step of making our function is to write our function declaration. This function does not need to output anything, so we will use <span class='inline-code'>void</span> as the output data type. The function is named <span class='inline-code'>getToPosition</span>. The inputs to the function are the three cartesian coordinates (x, y, z) that we want the end of the arm to reach. Each of these inputs will be <span class='float-keyword keyword'>floats</span>."
        },
        {
            "type": "code-block",
            "content": "//Write function declaration\nvoid getToPosition(float x, float y, float z){"
        },
        {
            "type": "text",
            "content": "Next, we need to get the current angle of the servo. We will use the myRobot function <span class='inline-code'>servoMotors[i].read()</span> to read the angle of servo i in degrees. Note that we once again use <span class='inline-code'>myRobot.</span> before the function name as the function belongs to the <span class='inline-code'>myRobot</span> object."
        },
        {
            "type": "code-block",
            "content": "//Store the current locations of the servos\nint angle0 = myRobot.servoMotors[0].read();\nint angle1 = myRobot.servoMotors[1].read();\nint angle2 = myRobot.servoMotors[2].read();\nint angle3 = myRobot.servoMotors[3].read();"
        },
        {
            "type": "text",
            "content": "Next, we will use the <span class='inline-code'>myRobot</span> function <span class='inline-code'>Move_position_xyz()</span> to tell the robotic arm to start moving to the coordinates that we give it as inputs."
        },
        {
            "type": "code-block",
            "content": "//Move the robotic arm to the star\nmyRobot.Move_position_xyz(x, y, z);"
        },
        {
            "type": "text",
            "content": "The next step is to store the target angles for each of the servos as variables of type <span class='int-keyword keyword'>int</span> so that we can compare them later."
        },
        {
            "type": "code-block",
            "content": "//Store the target angles\nint target0=myRobot.targetAngles[0];\nint target1=myRobot.targetAngles[1];\nint target2=myRobot.targetAngles[2];\nint target3=myRobot.targetAngles[3];"
        },
        {
            "type": "text",
            "content": "The next step is to use a while loop. We will also use the function <span class='inline-code'>isError()</span> that we developed in Task 3. <br><br>We want the loop to continue running as long as at least one of the <span class='inline-code'>isError()</span> functions returns true. To do this, we will use an OR operator (denoted as ||) to combine the outputs of each <span class='inline-code'>isError()</span> function. As long as at least one of the functions returns <span class='inline-code'>true</span>, then all of their outputs will be combined to <span class='inline-code'>true</span> and the code inside the loop will repeat. If all of the functions return <span class='inline-code'>false</span>, then all of their outputs will be combined to <span class='inline-code'>false</span> and we will exit the loop."
        },
        {
            "type": "code-block",
            "content": "//Write the while loop with condition\nwhile (isError(target0, angle0) || isError(target1, angle1) || isError(target2, angle2) || isError(target3, angle3)){\n\n}"
        },
        {
            "type": "text",
            "content": "Within, the while loop, we will have to update the reading of the current angles of the servos."
        },
        {
            "type": "code-block",
            "content": "//Update the current angles\nangle0 = myRobot.servoMotors[0].read();\nangle1 = myRobot.servoMotors[1].read();\nangle2 = myRobot.servoMotors[2].read();\nangle3 = myRobot.servoMotors[3].read();"
        },
        {
            "type": "text",
            "content": "Now it is your turn to write the code for the function by putting everything together!"
        },
        {
            "type": "editor-write",
            "content": ""
        },
        {
            "type": "editor-read-only",
            "content": "//Write function declaration\nvoid getToPosition(float x, float y, float z){\n\t//Store the current locations of the servos\n\tint angle0 = myRobot.servoMotors[0].read();\n\tint angle1 = myRobot.servoMotors[1].read();\n\tint angle2 = myRobot.servoMotors[2].read();\n\tint angle3 = myRobot.servoMotors[3].read();\n\t//Move the robotic arm to the star\n\tmyRobot.Move_position_xyz(x, y, z);\n\t//Store the target angles\n\tint target0=myRobot.targetAngles[0];\n\tint target1=myRobot.targetAngles[1];\n\tint target2=myRobot.targetAngles[2];\n\tint target3=myRobot.targetAngles[3];\n\twhile (isError(target0, angle0) || isError(target1, angle1) || isError(target2, angle2) || isError(target3, angle3)){\n\t\t//Update the current angles\n\t\tangle0 = myRobot.servoMotors[0].read();\n\t\tangle1 = myRobot.servoMotors[1].read();\n\t\tangle2 = myRobot.servoMotors[2].read();\n\t\tangle3 = myRobot.servoMotors[3].read();\n\t}\n}"
        },



        {
            "type": "task-heading",
            "content": "Task 5: Get the job done (loop)"
        },
        {
            "type": "text",
            "content": "Now that we have the building blocks for our program, we will finish by writing the main loop.<br/><br/>We will use <span class='inline-code'>getToPosition</span> to move the robotic arm to the correct location. All of this will be written within a function called <span class='inline-code'>loop()</span>."
        },
        {
            "type": "text",
            "content": "The first step is to use the <span class='inline-code'>getToPosition</span> function using the coordinates of each star. This will move the tip of the arm to that location to catch the star. The coordinates of each star can be found in the simulation to the right. <br><br>The example below showcases how to call the function with the coordinates of one of the stars."
        },
        {
            "type": "code-block",
            "content": "//Use the functions to input the x-y-z.\ngetToPosition(1.5,-1.3,0.4);"
        },
        {
            "type": "text",
            "content": "You will need to repeat this command for each star, replacing the coordinates in the function input each time. You should end up calling this function four times, each one on a new line."
        },
        {
            "type": "text",
            "content": "Lastly, we will add an infinite loop at the end of the <span class='inline-code'>loop()</span> function (but after our four calls to <span class='inline-code'>getToPosition</span>). Because this new loop will repeat forever, nothing else will happen and we can manually exit our code using the button in the bottom right corner of your screen."
        },
        {
            "type": "code-block",
            "content": "//Create an infinite loop\nwhile(true){}"
        },
        {
            "type": "text",
            "content": "Now try to write the contents of your <span class='inline-code'>loop()</span> function! Try and complete this final task without looking at the answers."
        },
        {
            "type": "editor-write",
            "content": "void loop() {\n\n}"
        },
        {
            "type": "editor-read-only",
            "content": "void loop() {\n\t//Use the functions to input the x-y-z.\n\tgetToPosition(1.5,-1.3,0.6);\n\tgetToPosition(-1.4,-1.5,1.1);\n\tgetToPosition(1.5,1.5,0.9);\n\tgetToPosition(-1.1,1.6,1.4);\n\t//Create an infinite loop\n\twhile(true){}\n}"
        },
        {
            "type": "text",
            "content": "Congratulations on reaching the end of this project! This is a very early prototype of some of the functionality and content you can expect from CreateBase in the future. We only ask for two more things from you:)"
        },
        {
            "type": "text",
            "content": "Firstly, please make sure that you fill out the survey that we have (or will) provide to you, as your feedback is absolutely vital to us. Try and make your answers as detailed and awesome as you are. <br><br>Secondly, we ask you to dream for a bit. Imagine the coolest things that you could possibly do with a tool such as this. They do not have to be realistic, let your imagination run wild, and make sure that you let one of us know what you can come up with."
        },
        {
            "type": "compile",
            "content": ""
        }
    ]
}
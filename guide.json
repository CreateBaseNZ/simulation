{
    "subsystem": "Catch the Stars",
    "contents": [{
            "type": "subsystem-heading",
            "content": "Catch the Stars"
        },
        {
            "type": "text",
            "content": "Four stars have fallen out of the sky! Using the special star catching device attached to your robotic arm, collect all five stars. The star catching device collects stars when by touching them so you need to program your robotic arm to move to the correct coordinates. We’ll help guide you but it’s up to you to collect them all.<br/><br/>We have broken this down into 5 tasks:<br/>0. Introduction<br/>1. Configure the robotic arm<br/>2. Setup<br/>3. Develop <span class='inline-code'>isError()</span><br/>4. Develop <span class='inline-code'>getToPosition()</span><br/>5. Get the job done<br/><br/>Good Luck!"
        },
        {
            "type": "task-heading",
            "content": "Task 0: Introduction"
        },
        {
            "type": "text",
            "content": "Your robotic arm has 3 key features:<br/><br/>1. Links: Links in robotic arms are the parts that connect the different joints of the robotic arm together. This is similar to how your upper arm connects your shoulder and elbow joint and your forearm connects your elbow and wrist joints.<br/><br/> 2. Servo motors. The servo motors are a type of <span class='actuator-keyword keyword'>actuator</span> that receive instructions from the arduino board on what its angle should be and then rotate to match. We use one of these servos at each joint to rotate the joint.<br/><br/>3. Arduino board: The Arduino is a miniature computer that can be programmed to interact with the environment. The Arduino board has an important part called a pin. Pins are connectors on the Arduino board that we can connect the servos to, similar to plugging in a USB."
        },
        {
            "type": "image",
            "src": "https://raw.githubusercontent.com/CreateBaseNZ/cb-simulation-model/main/images/project/Arduino.png",
            "alt": "Arduino Board"
        },
        {
            "type": "text",
            "content": "Some programming principles are discussed below:<br/><br/>1. Functions: <span class='function-keyword keyword'>functions</span> are pieces of code that perform a certain task.<br/><br/>2. Library:  a <span class='library-keyword keyword'>library</span> is a collection of prewritten that functions we can add to our program."
        },
        {
            "type": "task-heading",
            "content": "Task 1: Configure the Robotic Arm"
        },
        {
            "type": "text",
            "content": "Before we start programming, we will first have to configure the robotic arm."
        },
        {
            "type": "text",
            "content": "The code below gives us access to the RobotArm <span class='classAndObject-keyword keyword'>object</span> within the RobotArm <span class='library-keyword keyword'>library</span>. This library, called <span class='inline-code'>RobotArm.h</span>, includes all the <span class='function-keyword keyword'>functions</span> we need."
        },
        {
            "type": "code-block",
            "content": "//Include required libraries\n#include \"RobotArm.h\""
        },
        {
            "type": "text",
            "content": "Next, we create a list of the physical size of each link. The lengths of the links are 0.5m, 1.05m, 1.05m and 0.45m respectively."
        },
        {
            "type": "code-block",
            "content": "// Define length of each robot arm link\nfloat linkLengths[] = {0.5,1.05,1.05,0.45};"
        },
        {
            "type": "text",
            "content": "For the Robotic Arm to operate we need to define it as an <span class='classAndObject-keyword keyword'>object</span> with code."
        },
        {
            "type": "code-block",
            "content": "// Create our robot arm object.\nRobotArm robotArm(linkLengths);"
        },
        {
            "type": "text",
            "content": "Now let’s combine the code above into the editor below to write the code that configures your Robotic Arm!"
        },
        {
            "type": "editor-write",
            "content": ""
        },
        {
            "type": "text",
            "content": "When you think you are done, try running the code to make sure that you do not get any errors in the terminal at the bottom of your screen. \n If you cannot figure out the answer, reveal the solution below (and make sure that you update your code with the correct answer)."
        },
        {
            "type": "editor-read-only",
            "content": "//Include required libraries\n#include \"RobotArm.h\"\n// Define length of each robot arm link\nfloat linkLengths[] = {0.5,1.05,1.05,0.45};\n// Create our robot arm object.\nRobotArm robotArm(linkLengths);"
        },
        {
            "type": "task-heading",
            "content": "Task 2: Setup"
        },
        {
            "type": "text",
            "content": "We need to add the positions of our four motors to the object we created. <span class='inline-code'>robotArm.ConfigurePins(motorPins)</span>: This function adds the motorPins to the robotArm object.<br/><br/>"
        },
        {
            "type": "text",
            "content": "First, we create an array of the pins we want to connect the motor to on the arduino board. The motors will be attached to pins 8, 9, 10 and 11 respectively."
        },
        {
            "type": "code-block",
            "content": "//Write the motor pins\nint motorPins[4]={8,9,10,11};"
        },
        {
            "type": "text",
            "content": "Next, we record the pins the servos are connected to ConfigurePins(motorPins) into the robotArm."
        },
        {
            "type": "code-block",
            "content": "//Setup the pins for our virtual robot\nrobotArm.ConfigurePins(motorPins);"
        },
        {
            "type": "text",
            "content": "Now it is your turn to write the code to set up your program!"
        },
        {
            "type": "editor-write",
            "content": "void setup() {\n\n}"
        },
        {
            "type": "editor-read-only",
            "content": "void setup(){\n\t//Write the motor pins\n\tint motorPins[4]={8,9,10,11};\n\tSerial.begin(9600);\n\t//Setup the pins for our virtual robot\n\trobotArm.ConfigurePins(motorPins);\n}"
        },
        {
            "type": "task-heading",
            "content": "Task 3: Develop isError."
        },
        {
            "type": "text",
            "content": "Now we need to check if the serovs have reached the correct angle, if they have we need to stop the servo at the correct angle until all servos are stopped.<br/><br/>Let's develop our first function. We will call the function isError. This function checks for an error between the target and current angles of the servo. An acceptable error of 1 degree is allowed. The function returns true if the error is greater or equal to 1 and false otherwise.<br/>"
        },
        {
            "type": "text",
            "content": "The first step of making a function is to write our function deceleration. The output is type bool (boolean)<br/><br/>Next is the name of our function which is isError.<br/><br/>Between round brackets are the input(s). We will make them both int (integers)."
        },
        {
            "type": "code-block",
            "content": "//Declare function\nbool isError(int target, int current){"
        },
        {
            "type": "text",
            "content": "Next, we need to first find the absolute (i.e. sign is ignored) error between the two inputs."
        },
        {
            "type": "code-block",
            "content": "//Find the absolute error between the two angles\nint absError = abs(target-current);"
        },
        {
            "type": "text",
            "content": "If the error is greater than the allowable error, then the function should end and return true as output."
        },
        {
            "type": "code-block",
            "content": "//Check if the error is higher than the allowable error\nif(absError >= 1){\n\treturn true;\n}"
        },
        {
            "type": "text",
            "content": "If the condition above is not met then it should return flase."
        },
        {
            "type": "code-block",
            "content": "//If error is less than allowable error return false\nelse{\n\treturn false;\n}\n}"
        },
        {
            "type": "text",
            "content": "Now it is your turn to write the code for the function!"
        },
        {
            "type": "editor-write",
            "content": ""
        },
        {
            "type": "editor-read-only",
            "content": "//Declare function\nbool isError(int target, int current){\n\t//Find the absolute error between the two angles\n\tint absError = abs(target-current);\n\t//Check if the error is higher than the allowable error\n\tif(absError >= 1){\n\t\treturn true;\n\t}\n\t//If error is less than allowable error return false\n\telse{\n\t\treturn false;\n\t}\n}"
        },
        {
            "type": "task-heading",
            "content": "Task 4: Develop getToPosition"
        },
        {
            "type": "text",
            "content": "Now that we have a function that checks if one servo has reached its position, we need to make a function that instructs the robotic arm where to go and waits for it to reach the position."
        },
        {
            "type": "text",
            "content": "The first step of making a function is to write our function deceleration. As no output void is used for output type. The function is named getToPostion. The coordinates are input and of type float (short for floating decimal)."
        },
        {
            "type": "code-block",
            "content": "//Write function declaration\nvoid getToPosition(float x, float y, float z){"
        },
        {
            "type": "text",
            "content": "Next, we need to get the current angle of the servo. We will use .servoMotors[i].read() to get the readings."
        },
        {
            "type": "code-block",
            "content": "//Store the current locations of the servos\nint angle0 = robotArm.servoMotors[0].read();\nint angle1 = robotArm.servoMotors[1].read();\nint angle2 = robotArm.servoMotors[2].read();\nint angle3 = robotArm.servoMotors[3].read();"
        },
        {
            "type": "text",
            "content": "Next, we will use the move_position_xyz for the robotic arm to start moving."
        },
        {
            "type": "code-block",
            "content": "//Move the robotic arm to the star\nrobotArm.Move_position_xyz(x, y, z);"
        },
        {
            "type": "text",
            "content": "The next step is to store the target angles for each of the servos for comparison"
        },
        {
            "type": "code-block",
            "content": "//Store the target angles\nint target0=robotArm.targetAngles[0];\nint target1=robotArm.targetAngles[1];\nint target2=robotArm.targetAngles[2];\nint target3=robotArm.targetAngles[3];"
        },
        {
            "type": "text",
            "content": "The next step is to use a while loop. We will also use the function we developed in the previous function. An OR (denoted as ||) to combine the different outputs of the functions into one boolean value."
        },
        {
            "type": "code-block",
            "content": "//Write the while loop with condition\nwhile (isError(target0, angle0) || isError(target1, angle1) || isError(target2, angle2) || isError(target3, angle3)){\n\n}"
        },
        {
            "type": "text",
            "content": "Within, the while loop, we will have to update the reading of the current angle of the servos"
        },
        {
            "type": "code-block",
            "content": "//Update the current angles\nangle0 = robotArm.servoMotors[0].read();\nangle1 = robotArm.servoMotors[1].read();\nangle2 = robotArm.servoMotors[2].read();\nangle3 = robotArm.servoMotors[3].read();"
        },
        {
            "type": "text",
            "content": "Now it is your turn to write the code for the function!"
        },
        {
            "type": "editor-write",
            "content": ""
        },
        {
            "type": "editor-read-only",
            "content": "//Write function declaration\nvoid getToPosition(float x, float y, float z){\n\t//Store the current locations of the servos\n\tint angle0 = robotArm.servoMotors[0].read();\n\tint angle1 = robotArm.servoMotors[1].read();\n\tint angle2 = robotArm.servoMotors[2].read();\n\tint angle3 = robotArm.servoMotors[3].read();\n\t//Move the robotic arm to the star\n\trobotArm.Move_position_xyz(x, y, z);\n\t//Store the target angles\n\tint target0=robotArm.targetAngles[0];\n\tint target1=robotArm.targetAngles[1];\n\tint target2=robotArm.targetAngles[2];\n\tint target3=robotArm.targetAngles[3];\n\twhile (isError(target0, angle0) || isError(target1, angle1) || isError(target2, angle2) || isError(target3, angle3)){\n\t\t//Update the current angles\n\t\tangle0 = robotArm.servoMotors[0].read();\n\t\tangle1 = robotArm.servoMotors[1].read();\n\t\tangle2 = robotArm.servoMotors[2].read();\n\t\tangle3 = robotArm.servoMotors[3].read();\n\t}\n}"
        },
        {
            "type": "task-heading",
            "content": "Task 5: Get the job done (loop)"
        },
        {
            "type": "text",
            "content": "Now that we have the building blocks for our program, we will finish by writing the loop.<br/>We will use getToPosition to move the robotic arm to the correct location. All this is written within function called loop()."
        },
        {
            "type": "text",
            "content": "The first step is to use the getToPosition() function using the coordinate of each star. This will move the tip of the arm to that location to catch the star."
        },
        {
            "type": "code-block",
            "content": "//Use the functions to input the x-y-z.\ngetToPosition(1.5,-1.3,0.4);"
        },
        {
            "type": "text",
            "content": "Repeat the command for each star. You should have that four times"
        },
        {
            "type": "text",
            "content": "<br/>Next, we will run an infinite loop. Nothing else will run anymore"
        },
        {
            "type": "code-block",
            "content": "//Create an infinite loop\nwhile(true){}"
        },
        {
            "type": "text",
            "content": "Now try to write your loop!"
        },
        {
            "type": "editor-write",
            "content": "void loop() {\n\n}"
        },
        {
            "type": "editor-read-only",
            "content": "void loop() {\n\t//Use the functions to input the x-y-z.\n\tgetToPosition(1.5,-1.3,0.4);\n\tgetToPosition(-1.4,-1.5,1.1);\n\tgetToPosition(1.5,1.5,0.9);\n\tgetToPosition(-1.1,1.6,1.4);\n\t//Create an infinite loop\n\twhile(true){}\n}"
        },
        {
            "type": "compile",
            "content": ""
        }
    ]
}
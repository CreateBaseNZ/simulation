{
    "subsystem": "Catch the Stars",
    "contents": [{
            "type": "subsystem-heading",
            "content": "Catch the Stars"
        },
        {
            "type": "text",
            "content": "Five stars have fallen out of the sky! Using the special star catching device attached to your robotic arm, collect all five stars. The star catching device collects stars when by touching them so you need to program your robotic arm to move to the correct coordinates. We’ll help guide you but it’s up to you to collect them all.<br/><br/>We have broken this down into 7 tasks:<br/>0. Introduction<br/>1. Configure the robotic arm<br/>2.Setup<br/>3. robotArm Object Commands<br/>4. Develop isError<br/>5. Develop getToPosition<br/>6. Get the job done<br/><br/>Good Luck!"
        },
        {
            "type": "task-heading",
            "content": "Task 0: Introduction"
        },
        {
            "type": "text",
            "content": "Your robotic arm has 3 key features:<br/><br/>1. Links: Links in robotic arms are the parts that connect the different joints of the robotic arm together.<br/><br/> 2. Servo motors. The servo motors receive instructions from the arduino board on what its angle should be.<br/><br/>2. Arduino board: The arduino could be programmed to interact with the environment.<br/><br/>a. Pins: Connectors on the arduino to connect the servos on."
        },
        {
            "type": "image",
            "src": "https://raw.githubusercontent.com/CreateBaseNZ/cb-simulation-model/main/images/project/Arduino.png",
            "alt": "Arduino Board"
        },
        {
            "type": "text",
            "content": "Some programming principles are discussed below:<br/><br/>1. Functions: ffunctions are pieces of code that perform a certain task.<br/><br/>2. Library:  a library is a collection of functions we could add to our program."
        },
        {
            "type": "task-heading",
            "content": "Task 1: Configure the Robotic Arm"
        },
        {
            "type": "text",
            "content": "Before we start programming, we will first have to configure the robotic arm."
        },
        {
            "type": "text",
            "content": "The code below gives us access to the RobotArm library within the RobotArm library. This library, called RobotArm.h, includes all the functions we need <span class='function-keyword keyword'>functions</span> we need"
        },
        {
            "type": "code-block",
            "content": "//Include required libraries\n#include \"RobotArm.h\""
        },
        {
            "type": "text",
            "content": "Next, create a list of the physical size of each link. The lengths of the links are 0.5m, 1.05m, 1.05m and 0.45m respectively."
        },
        {
            "type": "code-block",
            "content": "// Define length of each robot arm link\nfloat linkLengths[] = {0.5,1.05,1.05,0.45};"
        },
        {
            "type": "text",
            "content": "For the Robotic Arm to operate we need to define it as an object with code."
        },
        {
            "type": "code-block",
            "content": "// Create our robot arm object.\nRobotArm robotArm(linkLengths);"
        },
        {
            "type": "text",
            "content": "Now let’s write the code to configure your Robotic Arm!"
        },
        {
            "type": "editor-write",
            "content": ""
        },
        {
            "type": "editor-read-only",
            "content": "//Include required libraries\n#include \"RobotArm.h\"\n// Define length of each robot arm link\nfloat linkLengths[] = {0.5,1.05,1.05,0.45};\n// Create our robot arm object.\nRobotArm robotArm(linkLengths);"
        },
        {
            "type": "task-heading",
            "content": "Task 2: Setup"
        },
        {
            "type": "text",
            "content": "We need to add the positions of our four motors to the object we created. robotArm.ConfigurePins(motorPins): This function adds the motorPins to the robotArm object.<br/><br/>"
        },
        {
            "type": "text",
            "content": "First, we create an array of the pins we want to connect the motor to on the arduino board. The motors will be attached to pins 8, 9, 10 and 11 respectively."
        },
        {
            "type": "code-block",
            "content": "//Write the motor pins\nint motorPins[4]={8,__,__,__};"
        },
        {
            "type": "text",
            "content": "Next, we add the number of motors and their connected pins to our object using .ConfigurePins(motorPins)."
        },
        {
            "type": "code-block",
            "content": "// Setup the pins for our virtual robot\nrobotArm.ConfigurePins(motorPins);"
        },
        {
            "type": "text",
            "content": "Finally, we will create a communication link between the robotic arm and your computer through terminal. This allows us to send and receive data from the arduino. The speed of the communication is 9600."
        },
        {
            "type": "code-block",
            "content": "//begin the communication at the specified speed\nSerial.begin(__);"
        },
        {
            "type": "text",
            "content": "Now it is your turn to write the code to set up your program!"
        },
        {
            "type": "editor-write",
            "content": "void setup() {\n\n}"
        },
        {
            "type": "task-heading",
            "content": "Task 3: Get familar with the robotArm object."
        },
        {
            "type": "text",
            "content": "Before going further, we will go through some of the functions needed for the later stages."
        },
        {
            "type": "text",
            "content": ".servoMotors[i].read(): This command outputs the current angle of servo i.<br/><br/>Replace i with the servo you want by using its motorPins list position. "
        },
        {
            "type": "code-block",
            "content": "robotArm.servoMotors[i].read()"
        },
        {
            "type": "text",
            "content": ".targetAngles[i]: The command below outputs the angle position that servo i has been instructed to go to.<br/><br/>Replace i with the servo you want by using its motorPins list position."
        },
        {
            "type": "code-block",
            "content": "robotArm.targetAngles[i]"
        },
        {
            "type": "text",
            "content": ".Move_position_xyz: This command figures out which angle the servos should be at for the star catcher to be at the location specified by our input (x,y,z)(we should input the location of the star to catch it)."
        },
        {
            "type": "code-block",
            "content": "robotArm.Move_position_xyz(x, y, z);"
        },
        {
            "type": "text",
            "content": "Therefore the best order of commands is:<br/>1. Use Move_position_xyz to start moving the arm to a star’s location<br/>2. Wait until all servos are in the correct position for the arm to reach the star.<br/>3. Repeat the steps for the next star until all are done.<br/><br/>To do this we will create these two functions:<br/><br/>isError: this function determines whether a servo is still travelling to the target angle or not.<br/><br/>getToPosition: this function sends the arm to the imputed location and waits until all servos reach their positions."
        },
        {
            "type": "task-heading",
            "content": "Task 4: Develop isError."
        },
        {
            "type": "text",
            "content": "Now we need to check if the serovs have reached the correct angle, if they have we need to stop the servo at the correct angle until all servos are stopped.<br/><br/>Let's develop our first function. We will call the function isError. This function checks for an error between the target and current angles of the servo. An acceptable error of 1 degree is allowed. The function returns true if the error is greater or equal to 1 and false otherwise.<br/>"
        },
        {
            "type": "text",
            "content": "The first step of making a function is to write our function deceleration. The purpose of this is to define the data type of the output.<br/>Our output will be true/false so a bool (short for boolean) data type is used.<br/><br/>The second step is naming the function.<br/>We want the name of our function to be isError.<br/><br/>Finally, between square brackets are the data type of input(s) and a variable name for these input(s).<br/>The function will compare two values, so two inputs are needed. Both angles are integers so the data type int (short for integer) is used."
        },
        {
            "type": "code-block",
            "content": "bool isError(int target, int current){"
        },
        {
            "type": "text",
            "content": "As mentioned in the purpose of the function, we need to first find the absolute (i.e. sign is ignored) error between the two inputs."
        },
        {
            "type": "code-block",
            "content": "//Find the absolute error between the two angles\nint absError = abs(target-current);"
        },
        {
            "type": "text",
            "content": "Once that is calculated, we can allow for a maximum error of 1. If the error is greater than 1 then an error exists and the function will end and return true as output."
        },
        {
            "type": "code-block",
            "content": "//Check if the error is higher than the allowable error\nif(absError >= __){\n\treturn true;\n}"
        },
        {
            "type": "text",
            "content": "If the condition above is not true and the error is less than 1 then the function returns false. If the condition in the if statement is not satisfied the program will enter the else branch."
        },
        {
            "type": "code-block",
            "content": "//If error is less than allowable error return false\nelse{\n\treturn false;\n}\n}"
        },
        {
            "type": "text",
            "content": "Now it is your turn to write the code for the function!"
        },
        {
            "type": "editor-write",
            "content": ""
        },
        {
            "type": "task-heading",
            "content": "Task 5: Develop getToPosition"
        },
        {
            "type": "text",
            "content": "Now that we have a function that checks if one servo has reached its position, we need to make a function that instructs the robotic arm where to go and waits for it to reach the position."
        },
        {
            "type": "text",
            "content": "The first step of making a function is to write our function deceleration. The purpose of this is to define the data type of the output.<br/>No output is needed so void data type is used.<br/><br/>The second step is naming the function.<br/>We want the name of our function to be getToPostion.<br/><br/>Finally, between square brackets are the data type of input(s) and a variable name for these input(s).<br/>The function will need the coordinate of the point, so three inputs are needed. The coordinates are decimals so the data type float (short for floating decimal) is used."
        },
        {
            "type": "code-block",
            "content": "//Write function declaration\nvoid getToPosition(float x, float y, float z){"
        },
        {
            "type": "text",
            "content": "Next, we need to get the current angle of the servo. We will use .servoMotors[i].read() to get the readings."
        },
        {
            "type": "code-block",
            "content": "//Store the current locations of the servos\nint angle0 = robotArm.servoMotors[0].read();\nint angle1 = robotArm.servoMotors[1].read();\nint angle2 = robotArm.servoMotors[2].read();\nint angle3 = robotArm.servoMotors[3].read();"
        },
        {
            "type": "text",
            "content": "Next, we will use the move_position_xyz for the robotic arm to start moving. The coordinates we will input to the move_position_xyz function will be the inputs we will get to the getTOPosition"
        },
        {
            "type": "code-block",
            "content": "//Move the robotic arm to the star\nrobotArm.Move_position_xyz(x, y, z);"
        },
        {
            "type": "text",
            "content": "The next step is to store the target angles for each of the servos for comparison"
        },
        {
            "type": "code-block",
            "content": "//Store the target angles\nint target0=robotArm.targetAngles[0]\nint target1=robotArm.targetAngles[1]\nint target2=robotArm.targetAngles[2]\nint target3=robotArm.targetAngles[3]"
        },
        {
            "type": "text",
            "content": "Now we will use a while loop. A while loop continue to run given the condition within the bracket is true, otherwise it will terminate. THe condition is checked at the start of each loop. So, if the condition is true, code within the loop runs again.<br/><br/>We want to wait until all the servos are in the correct angle for the arm tip to be at the coordinate specified, so we will use the function isError, we developed earlier. The function would give true if the servo hasn't reached the required point. <br/>If we run one iteration of the function on each servo we will get a true/false result for each servo. We would like them all tp return false. Therefore, for the while to continue one of the function will have to return true.If we have more than one condition, we combine them using AND (denoted &&) or OR(denoted ||). For this condition we want either first OR second OR third OR forth function to be true to continue. Therefore, we will use OR (denoted by ||) between each of the functions to get the required condition."
        },
        {
            "type": "code-block",
            "content": "//Write the while loop with condition\nwhile (isError(target0, angle0) || isError(target1, angle1) || isError(target2, angle2) || isError(target3, angle3)){\n\n}"
        },
        {
            "type": "text",
            "content": "The last part within the while is to make sure the condition can be changed from true to false. For us that would mean updating the current angle as it changes. Without this step, the while loop will never end"
        },
        {
            "type": "code-block",
            "content": "while (isError(target0, angle0) || isError(target1, angle1) || isError(target2, angle2) || isError(target3, angle3)){\n\t//Update the current angles\n\tangle0 = robotArm.servoMotors[0].read();\n\tangle1 = robotArm.servoMotors[1].read();\n\tangle2 = robotArm.servoMotors[2].read();\n\tangle3 = robotArm.servoMotors[3].read();\n}\n}"
        },
        {
            "type": "text",
            "content": "Now it is your turn to write the code for the function!"
        },
        {
            "type": "editor-write",
            "content": ""
        },
        {
            "type": "task-heading",
            "content": "Task 6: Get the job done"
        },
        {
            "type": "text",
            "content": "Now that we have the building blocks for our program, we will finish by writing the loop.<br/>All we need to do is type the coordinates of the stars into the function getToPosition. Our Robotic Arm will then collect all the stars at the coordinates in one go. After we enter all the points, we would like to stop any new command."
        },
        {
            "type": "text",
            "content": "The first step is to use the getToPosition() function using the right inputs (i.e. coordinates of the stars to collect them. Use the function 5 times. With each time have the coordinate of a star."
        },
        {
            "type": "editor-read-only",
            "content": "void loop() {\n\t//Use the functions to input the x-y-z.\n\tgetToPosition(__, __, __);\n\t\"\"\n\t\"\"\n\t\"\"\n}"
        },
        {
            "type": "text",
            "content": "To prevent the code from running continuously after we collect the stars, we will create a piece of code that is not exitted with nothing happening within. We will use a while loop to create an infinte loop. By making the condition always true, the while loop won't be terminated."
        },
        {
            "type": "editor-read-only",
            "content": "//Create an infinite loop\nwhile(true){}"
        },
        {
            "type": "text",
            "content": "Now try to write your loop!"
        },
        {
            "type": "editor-write",
            "content": "void loop() {\n\n}"
        },
        {
            "type": "compile",
            "content": ""
        }
    ]
}
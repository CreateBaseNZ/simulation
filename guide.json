{
    "subsystem": "Catch the Stars",
    "contents": [
        {
            "type": "subsystem-heading",
            "content": "Catch the Stars"
        },
        {
            "type": "text",
            "content": "Five stars have fallen out of the sky! Using the special star catching device attached to your robotic arm, collect all five stars. The star catching device collects stars when by touching them so you need to program your robotic arm to move to the correct coordinates. We’ll help guide you but it’s up to you to collect them all.<br/><br/>We have broken this down into 5 tasks:<br/>0. Introduction<br/>1. Configure the robotic arm<br/>2.Setup<br/>3. Develop isError<br/>4. Get the job done<br/><br/>Good Luck!"
        },
        {
            "type": "task-heading",
            "content": "Task 0: Introduction"
        },
        {
            "type": "text",
            "content": "Your robotic arm has 3 key features:<br/><br/>1. Links: Links in robotic arms are the parts that connect the different joints of the robotic arm together.<br/><br/> 2. Servo motors. The servo motors receive instructions from the arduino board on what its angle should be.<br/><br/>3. Arduino board: The arduino could be programmed to interact with the environment.<br/><br/>a. Pins: Connectors on the arduino to connect the servos on."
        },
        {
            "type": "image",
            "src": "https://raw.githubusercontent.com/CreateBaseNZ/cb-simulation-model/main/images/project/Arduino.png",
            "alt": "Arduino Board"
        },
        {
            "type": "text",
            "content": "Some programming principles are discussed below:<br/><br/>1. Functions: <span class='function-keyword keyword'>functions</span> are pieces of code that perform a certain task.<br/><br/>2. Library:  a library is a collection of functions we could add to our program."
        },
        {
            "type": "task-heading",
            "content": "Task 1: Configure the Robotic Arm"
        },
        {
            "type": "text",
            "content": "Before we start programming, we will first have to configure the robotic arm."
        },
        {
            "type": "text",
            "content": "The code below gives us access to the RobotArm library within the RobotArm library. This library, called RobotArm.h, includes all the <span class='function-keyword keyword'>functions</span> we need <span class='function-keyword keyword'>functions</span> we need"
        },
        {
            "type": "code-block",
            "content": "//Include required libraries\n#include \"RobotArm.h\""
        },
        {
            "type": "text",
            "content": "Next, create a list of the physical size of each link. The lengths of the links are 0.5m, 1.05m, 1.05m and 0.45m respectively."
        },
        {
            "type": "code-block",
            "content": "// Define length of each robot arm link\nfloat linkLengths[] = {0.5,1.05,1.05,0.45};"
        },
        {
            "type": "text",
            "content": "For the Robotic Arm to operate we need to define it as an object with code."
        },
        {
            "type": "code-block",
            "content": "// Create our robot arm object.\nRobotArm robotArm(linkLengths);"
        },
        {
            "type": "text",
            "content": "Now let’s write the code to configure your Robotic Arm!"
        },
        {
            "type": "editor-write",
            "content": ""
        },
        {
            "type": "editor-read-only",
            "content": "//Include required libraries\n#include \"RobotArm.h\"\n// Define length of each robot arm link\nfloat linkLengths[] = {0.5,1.05,1.05,0.45};\n// Create our robot arm object.\nRobotArm robotArm(linkLengths);"
        },
        {
            "type": "task-heading",
            "content": "Task 2: Setup"
        },
        {
            "type": "text",
            "content": "We need to add the positions of our four motors to the object we created. <span class='inline-code'>robotArm.ConfigurePins(motorPins)</span>: This function adds the motorPins to the robotArm object.<br/><br/>"
        },
        {
            "type": "text",
            "content": "First, we create an array of the pins we want to connect the motor to on the arduino board. The motors will be attached to pins 8, 9, 10 and 11 respectively."
        },
        {
            "type": "code-block",
            "content": "//Write the motor pins\nint motorPins[4]={8,9,10,11};"
        },
        {
            "type": "text",
            "content": "Next, we record the pins the servos are connected to ConfigurePins(motorPins) into the robotArm."
        },
        {
            "type": "code-block",
            "content": "//Setup the pins for our virtual robot\nrobotArm.ConfigurePins(motorPins);"
        },
        {
            "type": "text",
            "content": "Now it is your turn to write the code to set up your program!"
        },
        {
            "type": "editor-write",
            "content": "void setup() {\n\n}"
        },
        {
            "type": "editor-read-only",
            "content": "void setup(){\n\t//Write the motor pins\n\tint motorPins[4]={8,9,10,11};\n\t//Setup the pins for our virtual robot\n\trobotArm.ConfigurePins(motorPins);\n}"
        },
        {
            "type": "task-heading",
            "content": "Task 3: Develop isError."
        },
        {
            "type": "text",
            "content": "Now we need to check if the serovs have reached the correct angle, if they have we need to stop the servo at the correct angle until all servos are stopped.<br/><br/>Let's develop our first function. We will call the function isError. This function checks for an error between the target and current angles of the servo. An acceptable error of 1 degree is allowed. The function returns true if the error is greater or equal to 1 and false otherwise.<br/>"
        },
        {
            "type": "text",
            "content": "The first step of making a function is to write our function deceleration. The output is type bool (boolean)<br/><br/>Next is the name of our function which is isError.<br/><br/>Between round brackets are the input(s). We will make them both int (integers)."
        },
        {
            "type": "code-block",
            "content": "//Declare function\nbool isError(int target, int current){"
        },
        {
            "type": "text",
            "content": "Next, we need to first find the absolute (i.e. sign is ignored) error between the two inputs."
        },
        {
            "type": "code-block",
            "content": "//Find the absolute error between the two angles\nint absError = abs(target-current);"
        },
        {
            "type": "text",
            "content": "If the error is greater than the allowable error, then the function should end and return true as output."
        },
        {
            "type": "code-block",
            "content": "//Check if the error is higher than the allowable error\nif(absError >= 1){\n\treturn true;\n}"
        },
        {
            "type": "text",
            "content": "If the condition above is not met then it should return flase."
        },
        {
            "type": "code-block",
            "content": "//If error is less than allowable error return false\nelse{\n\treturn false;\n}\n}"
        },
        {
            "type": "text",
            "content": "Now it is your turn to write the code for the function!"
        },
        {
            "type": "editor-write",
            "content": ""
        },
        {
            "type": "editor-read-only",
            "content": "//Declare function\nbool isError(int target, int current){\n\t//Find the absolute error between the two angles\n\tint absError = abs(target-current);\n\t//Check if the error is higher than the allowable error\n\tif(absError >= 1){\n\t\treturn true;\n\t}\n\t//If error is less than allowable error return false\n\telse{\n\t\treturn false;\n\t}\n}"
        },
        {
            "type": "task-heading",
            "content": "Task 4: Get the job done (loop)"
        },
        {
            "type": "text",
            "content": "Now that we have the building blocks for our program, we will finish by writing the loop.<br/>We will use getToPosition to move the robotic arm to the correct location. All this is written within function called loop()."
        },
        {
            "type": "text",
            "content": "The first step is to use the getToPosition() function using the coordinate of each star. This will move the tip of the arm to that location to catch the star."
        },
        {
            "type": "code-block",
            "content": "//Use the functions to input the x-y-z.\ngetToPosition(1.5,-1.3,0.4);"
        },
        {
            "type": "text",
            "content": "Repeat the command for each star. You should have that four times"
        },
        {
            "type": "text",
            "content": "<br/>Next, we will run an infinite loop. Nothing else will run anymore"
        },
        {
            "type": "code-block",
            "content": "//Create an infinite loop\nwhile(true){}"
        },
        {
            "type": "text",
            "content": "Now try to write your loop!"
        },
        {
            "type": "editor-write",
            "content": "void loop() {\n\n}"
        },
        {
            "type": "editor-read-only",
            "content": "void loop() {\n\t//Use the functions to input the x-y-z.\n\tgetToPosition(1.5,-1.3,0.4);\n\tgetToPosition(-1.4,-1.5,1.1);\n\tgetToPosition(1.5,1.5,0.9);\n\tgetToPosition(-1.1,1.6,1.4);\n\t//Create an infinite loop\n\twhile(true){}\n}"
        },
        {
            "type": "compile",
            "content": ""
        }
    ]
}
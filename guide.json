{
    "guide": [{
            "type": "heading-1",
            "content": "Catch the Stars"
        },
        {
            "type": "text",
            "content": "We are programming the Robotic Arm to collect the stars."
        },
        {
            "type": "heading-1",
            "content": "Task 1: Configure the Robotic Arm"
        },
        {
            "type": "text",
            "content": "Before we start programming the Robotic Arm, we will first have to configure it. This would include inserting information about the arm into our program. We will do his by having the following code:"
        },
        {
            "type": "editor-read-only",
            "content": "#include \"RobotArm.h\"\n\n// Define length of each robot arm link\nfloat linkLengths[] = {0.5, 1.05, 1.05, 0.45};\n// Create our robot arm object.\nRobotArm robotArm(linkLengths);"
        },
        {
            "type": "text",
            "content": "Now, we are going through each set of code to understand what is happening."
        },
        {
            "type": "text",
            "content": "The code below allows us to include all the functions within the RobotArm library. For us, this library includes functions we could use to perform specific tasks."
        },
        {
            "type": "block-code",
            "content": "#include \"RobotArm.h\""
        },
        {
            "type": "text",
            "content": "Next, we would need to provide the program with the size of each of the links the robotic arm has. This is one of the pieces of information we need for the program to work. The measurements of each link are 0.5, 1.05, 1.05 and 0.45 m, respectively."
        },
        {
            "type": "block-code",
            "content": "// Define length of each robot arm link\nfloat linkLengths[] = {0.5, 1.05, 1.05, 0.45};"
        },
        {
            "type": "text",
            "content": "From the RobotArm.h library, we have this RobotArm object we could create. By  storing the size of each link within the object, the functions in the library will be applied to the robot arm with ours dimensions."
        },
        {
            "type": "block-code",
            "content": "// Create our robot arm object.\nRobotArm robotArm(linkLengths);"
        },
        {
            "type": "text",
            "content": "Now it is your turn to write the code to setup your Robotic Arm!"
        },
        {
            "type": "editor-write",
            "content": ""
        },
        {
            "type": "text",
            "content": "Before starting with the next step, there is something to consider. Each Arduino code needs to have two major parts:\n\t1. setup: The part of code that should run once at the start. Sensors, actuators and comunication channels should be intialised\n\t2. loop: The part of code that would run continuously. This typically includes the rest of the code\n"
        },
        {
            "type": "heading-1",
            "content": "Task 2: Setup"
        },
        {
            "type": "text",
            "content": "For the setup, we intialise the servo motors and save them into our robot arm object. In addition, communicate with the arduino board should be established. The code to perform this code is below:"
        },
        {
            "type": "editor-read-only",
            "content": "void setup() {\n\tint motorPins[4]={8,9,10,11};\n\tSerial.begin(9600);\n\t// Setup the pins for our virtual robot\n\trobotArm.ConfigurePins(motorPins);\n}"
        },
        {
            "type": "text",
            "content": "First, we will create an array of the pins we connected the motor to within the arduino board. This would enable us to pass it in with the next step"
        },
        {
            "type": "block-code",
            "content": "int motorPins[4]={8,9,10,11};"
        },
        {
            "type": "text",
            "content": "Next, we will pass on the pins to robotArm object through the function ConfigurePins. This function would make the object control the servos directly."
        },
        {
            "type": "block-code",
            "content": "// Setup the pins for our virtual robot\nrobotArm.ConfigurePins(motorPins);"
        },
        {
            "type": "text",
            "content": "Finally, we will create a communication link between the robotic arm and the computer. This would enable us to recieve data within the serial in addtion to send data to the ardiuo if needed."
        },
        {
            "type": "block-code",
            "content": "Serial.begin(9600);"
        },
        {
            "type": "text",
            "content": "Now it is your turn to write the code to setup your program!"
        },
        {
            "type": "editor-write",
            "content": "void setup() {\n\n}"
        },
        {
            "type": "heading-1",
            "content": "Task 3: Get familar with the robotArm object."
        },
        {
            "type": "text",
            "content": "Before going further, we will through some of the functions and values needed for the later stages."
        },
        {
            "type": "text",
            "content": "The command below is made to output the current angle position of servo i (0-3)."
        },
        {
            "type": "block-code",
            "content": "robotArm.servoMotors[i].read()"
        },
        {
            "type": "text",
            "content": "The command below is made to output the angle position  servo i (0-3) is instructed to go to."
        },
        {
            "type": "block-code",
            "content": "robotArm.targetAngles[i]"
        },
        {
            "type": "text",
            "content": "The command below is made to determince the angle the servos should be for the end effector to be at the location specified in the input (x,y,z). The target angles are saved into robotArm.targetAngles[i] and the servo is instructed to reach these angles"
        },
        {
            "type": "block-code",
            "content": "robotArm.Move_position_xyz(x, y, z);"
        },
        {
            "type": "text",
            "content": "Given these descriptions the best sequence of commands would be as follow:\n\t1. Use Move_position_xyz to start moving the arm\n\t2. Wait until all servos are at the right position.\n\t3. Repeat the steps for the next star until all are done."
        },
        {
            "type": "heading-1",
            "content": "Task 4: Develop a function."
        },
        {
            "type": "text",
            "content": "A function is used to avoid repeating pieces of code and making changes later easier. We will develop a function which would determine whether a servo has reached to its target angle. This is done through the code below:"
        },
        {
            "type": "editor-read-only",
            "content": "// Calculate if end effector reaches target\nbool error(float target, float current){\n\t/* Calculate how far away a target number is from \n\treference number*/\n\tfloat absError = abs(target-current);\n\t// Check if the absolute error is less than 1.\n\tif(absError > 1){\n\t\treturn true;\n\t}\n\treturn false;\n}"
        },
        {
            "type": "text",
            "content": "The code below is the function decleration. It has the type of output, name of function and, between brackets, the inputs with their data type."
        },
        {
            "type": "block-code",
            "content": "bool error(float target, float current)"
        },
        {
            "type": "text",
            "content": "The first step within the function would be to find the absolute (i.e. sign is ignored) difference between the two inputs"
        },
        {
            "type": "block-code",
            "content": "float absError = abs(target-current);"
        },
        {
            "type": "text",
            "content": "Next, the absolute difference is checked if its more less than 1 degree. This value determines the accuracy of the location. If the error is higher than 1 degree the function will end and return true as output."
        },
        {
            "type": "block-code",
            "content": "if(absError > 1){\n\treturn true;\n}"
        },
        {
            "type": "text",
            "content": "If the function reaches this point then the error was less than 1 degrees and the servo hasn't reached the point and false should be returned."
        },
        {
            "type": "block-code",
            "content": "return false;"
        },
        {
            "type": "text",
            "content": "Now it is your turn to write the code for the function!"
        },
        {
            "type": "editor-write",
            "content": ""
        },
        {
            "type": "heading-1",
            "content": "Task 5: Reach Point Number 1."
        },
        {
            "type": "text",
            "content": "Now that we have a function that would check whether one servo reached its position, we should make a function to move the robotic arm and wait till reach the position. The code for that would be as below:"
        },
        {
            "type": "editor-read-only",
            "content": "void getToPosition(float x, float y, float z){\n\t//Move robot arm to an x y z coordinate\n\trobotArm.Move_position_xyz(x, y, z);\n\t// Variable initialization \n\tint angle0 = robotArm.servoMotors[0].read();\n\tint angle1 = robotArm.servoMotors[1].read();\n\tint angle2 = robotArm.servoMotors[2].read();\n\tint angle3 = robotArm.servoMotors[3].read();\n\tint target0=robotArm.targetAngles[0]\n\tint target1=robotArm.targetAngles[1]\n\tint target2=robotArm.targetAngles[2]\n\tint target3=robotArm.targetAngles[3]\n\t// Keep moving to the position until the error function returns true\n\t// Check the error between the target angles calculated by for each\n\t// motor by our inverse kinematics function\n\t// compared to the current motor angles.\n\twhile (error(target0, angle0) || error(target1, angle1) || error(target2, angle2) || error(target3, angle3)) {\n\t\t// Update all the variables keeping track of our motor angles\n\t\tangle0 = robotArm.servoMotors[0].read();\n\t\tangle1 = robotArm.servoMotors[1].read();\n\t\tangle2 = robotArm.servoMotors[2].read();\n\t\tangle3 = robotArm.servoMotors[3].read();\n\t}\n}"
        },
        {
            "type": "text",
            "content": "The code below is the function decleration. It has the type of output, name of function and, between brackets, the inputs with their data type."
        },
        {
            "type": "block-code",
            "content": "void getToPosition(float x, float y, float z)"
        },
        {
            "type": "text",
            "content": "First, we will use the move_position_xyz for the robotic arm to start moving."
        },
        {
            "type": "block-code",
            "content": "robotArm.Move_position_xyz(x, y, z);"
        },
        {
            "type": "text",
            "content": "The next step is to store the values that would be compared. These would be both the current and target angles for each of the servos"
        },
        {
            "type": "block-code",
            "content": "int angle0 = robotArm.servoMotors[0].read();\nint angle1 = robotArm.servoMotors[1].read();\nint angle2 = robotArm.servoMotors[2].read();\nint angle3 = robotArm.servoMotors[3].read();\nint target0=robotArm.targetAngles[0]\nint target1=robotArm.targetAngles[1]\nint target2=robotArm.targetAngles[2]\nint target3=robotArm.targetAngles[3]"
        },
        {
            "type": "text",
            "content": "Now we will use a while loop. The while loop will continue if the condition within the bracket is true, otherwise it will terminate. As we want to wait until all servos are in the correct position, we will use the function we developed. The function would give true if the servo hasn't reached the required point. If one of the servos still hasn't reached its target the while should continue. Therefore, we will use or (denoted by ||) between each of the functions to get the required performance."
        },
        {
            "type": "block-code",
            "content": "while (error(target0, angle0) || error(target1, angle1) || error(target2, angle2) || error(target3, angle3)){\n\n}"
        },
        {
            "type": "text",
            "content": "Lastly, the values of the current angles have to be updated within the while loop so we will register when the servos reach their target."
        },
        {
            "type": "block-code",
            "content": "while (error(target0, angle0) || error(target1, angle1) || error(target2, angle2) || error(target3, angle3)){\n\tangle0 = robotArm.servoMotors[0].read();\n\tangle1 = robotArm.servoMotors[1].read();\n\tangle2 = robotArm.servoMotors[2].read();\n\tangle3 = robotArm.servoMotors[3].read();\n}"
        },
        {
            "type": "text",
            "content": "Now it is your turn to write the code for the function!"
        },
        {
            "type": "editor-write",
            "content": ""
        },
        {
            "type": "heading-1",
            "content": "Task 6: Loop"
        },
        {
            "type": "text",
            "content": "Now that we have the building blocks for our program, we could finish it up by writing the loop. By simply typing the coordinates of the stars into the function getToPosition, we could get to all the stars. Below is the example code:"
        },
        {
            "type": "editor-read-only",
            "content": "void loop() {\n\t// Use functions to reuse some code\n\tmultiple times without having\n\t// to code it again\n\t// Use the functions to input the x-y-z\n\tcoordinates to each star\n\tgetToPosition(1.6, 2.4, 1.7);\n\tgetToPosition(1.5, -2.2, 2.3);\n\tgetToPosition(-0.9, -2.2, 2.1);\n\tgetToPosition(-1.8, -0.8, 1.9);\n\tgetToPosition(-1, -2.1, 0.2);\n}"
        },
        {
            "type": "text",
            "content": "Now try to write your loop!"
        },
        {
            "type": "editor-write",
            "content": "void loop() {\n\n}"
        },
        {
            "type": "compile",
            "content": ""
        }
    ]
}